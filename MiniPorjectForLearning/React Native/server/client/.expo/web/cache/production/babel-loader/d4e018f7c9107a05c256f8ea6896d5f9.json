{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}import{CodedError,NativeModulesProxy}from'@unimodules/core';import Platform from\"react-native-web/dist/exports/Platform\";import{AppOwnership,ExecutionEnvironment,UserInterfaceIdiom}from\"./Constants.types\";import ExponentConstants from\"./ExponentConstants\";export{AppOwnership,ExecutionEnvironment,UserInterfaceIdiom};if(!ExponentConstants){console.warn(\"No native ExponentConstants module found, are you sure the expo-constants's module is linked properly?\");}var manifest=null;if(NativeModulesProxy.ExpoUpdates){var updatesManifest;if(NativeModulesProxy.ExpoUpdates.manifest){updatesManifest=NativeModulesProxy.ExpoUpdates.manifest;}else if(NativeModulesProxy.ExpoUpdates.manifestString){updatesManifest=JSON.parse(NativeModulesProxy.ExpoUpdates.manifestString);}if(updatesManifest&&Object.keys(updatesManifest).length>0){manifest=updatesManifest;}}if(!manifest&&ExponentConstants&&ExponentConstants.manifest){manifest=ExponentConstants.manifest;if(typeof manifest==='string'){manifest=JSON.parse(manifest);}}var _ref=ExponentConstants||{},name=_ref.name,appOwnership=_ref.appOwnership,nativeConstants=_objectWithoutProperties(_ref,[\"name\",\"appOwnership\"]);var constants=_objectSpread(_objectSpread({},nativeConstants),{},{appOwnership:appOwnership!=null?appOwnership:null,deviceId:nativeConstants.installationId,linkingUrl:nativeConstants.linkingUri});Object.defineProperties(constants,{manifest:{enumerable:true,get:function get(){if(!manifest){var invalidManifestType=manifest===null?'null':'undefined';if(nativeConstants.executionEnvironment===ExecutionEnvironment.Bare&&Platform.OS!=='web'){console.warn(\"Constants.manifest is \"+invalidManifestType+\" because the embedded app.config could not be read. Ensure that you have installed the expo-constants build scripts if you need to read from Constants.manifest.\");}else if(nativeConstants.executionEnvironment===ExecutionEnvironment.StoreClient||nativeConstants.executionEnvironment===ExecutionEnvironment.Standalone){throw new CodedError('ERR_CONSTANTS_MANIFEST_UNAVAILABLE',\"Constants.manifest is \"+invalidManifestType+\", must be an object.\");}}return manifest;},set:function set(value){manifest=value;}}});export default constants;","map":{"version":3,"sources":["../src/Constants.ts"],"names":[],"mappings":"o7BAAA,OAAS,UAAT,CAAqB,kBAArB,KAA+C,kBAA/C,C,6DAGA,OAEE,YAFF,CAIE,oBAJF,CAQE,kBARF,yBAWA,MAAO,CAAA,iBAAP,2BAEA,OAEE,YAFF,CAIE,oBAJF,CAQE,kBARF,EAYA,GAAI,CAAC,iBAAL,CAAwB,CACtB,OAAO,CAAC,IAAR,CACE,wGADF,EAGD,CAED,GAAI,CAAA,QAAQ,CAAG,IAAf,CAEA,GAAI,kBAAkB,CAAC,WAAvB,CAAoC,CAClC,GAAI,CAAA,eAAJ,CACA,GAAI,kBAAkB,CAAC,WAAnB,CAA+B,QAAnC,CAA6C,CAC3C,eAAe,CAAG,kBAAkB,CAAC,WAAnB,CAA+B,QAAjD,CACD,CAFD,IAEO,IAAI,kBAAkB,CAAC,WAAnB,CAA+B,cAAnC,CAAmD,CACxD,eAAe,CAAG,IAAI,CAAC,KAAL,CAAW,kBAAkB,CAAC,WAAnB,CAA+B,cAA1C,CAAlB,CACD,CACD,GAAI,eAAe,EAAI,MAAM,CAAC,IAAP,CAAY,eAAZ,EAA6B,MAA7B,CAAsC,CAA7D,CAAgE,CAC9D,QAAQ,CAAG,eAAX,CACD,CACF,CAGD,GAAI,CAAC,QAAD,EAAa,iBAAb,EAAkC,iBAAiB,CAAC,QAAxD,CAAkE,CAChE,QAAQ,CAAG,iBAAiB,CAAC,QAA7B,CAEA,GAAI,MAAO,CAAA,QAAP,GAAoB,QAAxB,CAAkC,CAChC,QAAQ,CAAG,IAAI,CAAC,KAAL,CAAW,QAAX,CAAX,CACD,CACF,C,SAEmD,iBAAiB,EAAI,E,CAAjE,I,MAAA,I,CAAM,Y,MAAA,Y,CAAiB,e,wDAE/B,GAAM,CAAA,SAAS,gCACV,eADU,MAGb,YAAY,CAAE,YAAF,OAAE,YAAF,CAAkB,IAHjB,CAKb,QAAQ,CAAE,eAAe,CAAC,cALb,CAMb,UAAU,CAAE,eAAe,CAAC,UANf,EAAf,CASA,MAAM,CAAC,gBAAP,CAAwB,SAAxB,CAAmC,CACjC,QAAQ,CAAE,CACR,UAAU,CAAE,IADJ,CAER,GAFQ,eAEL,CACD,GAAI,CAAC,QAAL,CAAe,CACb,GAAM,CAAA,mBAAmB,CAAG,QAAQ,GAAK,IAAb,CAAoB,MAApB,CAA6B,WAAzD,CACA,GACE,eAAe,CAAC,oBAAhB,GAAyC,oBAAoB,CAAC,IAA9D,EACA,QAAQ,CAAC,EAAT,GAAgB,KAFlB,CAGE,CACA,OAAO,CAAC,IAAR,0BAC2B,mBAD3B,qKAGD,CAPD,IAOO,IACL,eAAe,CAAC,oBAAhB,GAAyC,oBAAoB,CAAC,WAA9D,EACA,eAAe,CAAC,oBAAhB,GAAyC,oBAAoB,CAAC,UAFzD,CAGL,CAGA,KAAM,IAAI,CAAA,UAAJ,CACJ,oCADI,0BAEqB,mBAFrB,wBAAN,CAID,CACF,CACD,MAAO,CAAA,QAAP,CACD,CAzBO,CA2BR,GA3BQ,cA2BJ,KA3BI,CA2BC,CACP,QAAQ,CAAG,KAAX,CACD,CA7BO,CADuB,CAAnC,EAkCA,cAAe,CAAA,SAAf","sourcesContent":["import { CodedError, NativeModulesProxy } from '@unimodules/core';\nimport { Platform } from 'react-native';\n\nimport {\n  AndroidManifest,\n  AppOwnership,\n  Constants,\n  ExecutionEnvironment,\n  IOSManifest,\n  NativeConstants,\n  PlatformManifest,\n  UserInterfaceIdiom,\n  WebManifest,\n} from './Constants.types';\nimport ExponentConstants from './ExponentConstants';\n\nexport {\n  AndroidManifest,\n  AppOwnership,\n  Constants,\n  ExecutionEnvironment,\n  IOSManifest,\n  NativeConstants,\n  PlatformManifest,\n  UserInterfaceIdiom,\n  WebManifest,\n};\n\nif (!ExponentConstants) {\n  console.warn(\n    \"No native ExponentConstants module found, are you sure the expo-constants's module is linked properly?\"\n  );\n}\n\nlet manifest = null;\n// If expo-updates defines a non-empty manifest, prefer that one\nif (NativeModulesProxy.ExpoUpdates) {\n  let updatesManifest;\n  if (NativeModulesProxy.ExpoUpdates.manifest) {\n    updatesManifest = NativeModulesProxy.ExpoUpdates.manifest;\n  } else if (NativeModulesProxy.ExpoUpdates.manifestString) {\n    updatesManifest = JSON.parse(NativeModulesProxy.ExpoUpdates.manifestString);\n  }\n  if (updatesManifest && Object.keys(updatesManifest).length > 0) {\n    manifest = updatesManifest;\n  }\n}\n\n// Fall back to ExponentConstants.manifest if we don't have one from Updates\nif (!manifest && ExponentConstants && ExponentConstants.manifest) {\n  manifest = ExponentConstants.manifest;\n  // On Android we pass the manifest in JSON form so this step is necessary\n  if (typeof manifest === 'string') {\n    manifest = JSON.parse(manifest);\n  }\n}\n\nconst { name, appOwnership, ...nativeConstants } = (ExponentConstants || {}) as any;\n\nconst constants = {\n  ...nativeConstants,\n  // Ensure this is null in bare workflow\n  appOwnership: appOwnership ?? null,\n  // Legacy aliases\n  deviceId: nativeConstants.installationId,\n  linkingUrl: nativeConstants.linkingUri,\n};\n\nObject.defineProperties(constants, {\n  manifest: {\n    enumerable: true,\n    get() {\n      if (!manifest) {\n        const invalidManifestType = manifest === null ? 'null' : 'undefined';\n        if (\n          nativeConstants.executionEnvironment === ExecutionEnvironment.Bare &&\n          Platform.OS !== 'web'\n        ) {\n          console.warn(\n            `Constants.manifest is ${invalidManifestType} because the embedded app.config could not be read. Ensure that you have installed the expo-constants build scripts if you need to read from Constants.manifest.`\n          );\n        } else if (\n          nativeConstants.executionEnvironment === ExecutionEnvironment.StoreClient ||\n          nativeConstants.executionEnvironment === ExecutionEnvironment.Standalone\n        ) {\n          // If we somehow get here, this is a truly exceptional state to be in.\n          // Constants.manifest should *always* be defined in those contexts.\n          throw new CodedError(\n            'ERR_CONSTANTS_MANIFEST_UNAVAILABLE',\n            `Constants.manifest is ${invalidManifestType}, must be an object.`\n          );\n        }\n      }\n      return manifest;\n    },\n    // This setter is only useful to mock the value for tests\n    set(value) {\n      manifest = value;\n    },\n  },\n});\n\nexport default constants as Constants;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}