[{"/home/roroblacc/Projects/React/lesson1/src/index.js":"1","/home/roroblacc/Projects/React/lesson2/src/index.js":"2","/home/roroblacc/Projects/React/lesson3- tweet proptypes/src/index.js":"3"},{"size":1553,"mtime":1610589360116,"results":"4","hashOfConfig":"5"},{"size":2587,"mtime":1610641605932,"results":"6","hashOfConfig":"7"},{"size":3396,"mtime":1610655967812,"results":"8","hashOfConfig":"9"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},"bqe9dt",{"filePath":"13","messages":"14","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"19xdsjr",{"filePath":"15","messages":"16","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},"17vet0z","/home/roroblacc/Projects/React/lesson1/src/index.js",["18"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n\nfunction Message()\n{\n  return(\n    <div className=\"message\">\n      This is Less than 140 Characters \n    </div>\n  )\n}\nfunction NameWithhandle (){\nreturn(\n  <span className=\"name-with-handle\">\n    <span className=\"name\">Your Name</span>\n    <span className=\"handle\">@yourhandle</span>\n  </span>\n);\n\n}\n\nconst Time = () => (\n<span className=\"time\">3h ago</span>\n);\n\nconst ReplyButton =() => (\n  <i className=\"fa fa-reply reply-button\"/>\n);\n\nconst RetweetButton =() => (\n  <i className=\"fa fa-retweet retweet-button\"/>\n);\n\nconst LikeButton = () => (\n<i className=\"fa fa-heart like-button\" />\n);\n\nconst MoreoptionsButton =() =>(\n  <i className=\"fa fa-ellipsis-h more-options-button\"></i>\n);\n\n\nfunction Avatar() \n{\n  return(\n    <img src=\"https://www.gravatar.com/avatar/c050686033f2bca3421fa701ad4f6cec\" alt=\"avatar\" className=\"avatar\" />\n  )\n\n}\n\nfunction Tweet(){\n  return(\n    <div className=\"tweet\">\n      <Avatar />\n      <div className=\"content\">\n        <NameWithhandle/>\n        <Message/>\n        <div className=\"buttons\">\n          <ReplyButton/>\n          <RetweetButton/>\n          <LikeButton/>\n          <MoreoptionsButton/>\n        </div>\n      </div>\n      \n    </div>\n  );\n\n\n}\n\nReactDOM.render(\n  <Tweet/>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n","/home/roroblacc/Projects/React/lesson2/src/index.js",["19","20"],"/home/roroblacc/Projects/React/lesson3- tweet proptypes/src/index.js",["21","22"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport  moment from 'moment';\nimport PropTypes from 'prop-types';\n\n\nfunction Message({text})\n{\n  return(\n    <div className=\"message\">\n     {text}\n    </div>\n  )\n}\n\nMessage.propTypes = {\n  text: PropTypes.string\n};\n\nfunction NameWithhandle ({author}){\n  const {name,handle} = author;\nreturn(\n  <span className=\"name-with-handle\">\n    <span className=\"name\">{name}</span>\n    <span className=\"handle\">@{handle}</span>\n  </span>\n);\n\n}\n\nNameWithhandle.propTypes = {\n\n  author: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    handle: PropTypes.string.isRequired\n  }).isRequired\n};\n\nconst Time = ({time}) => {\n  const timeString = moment(time).fromNow();\n  return(\n<span className=\"time\">\n  {timeString}\n</span>\n\n);\n}\n\nTime.propTypes = {\n  time: PropTypes.string\n};\n\n\n\nconst ReplyButton =() => (\n  <i className=\"fa fa-reply reply-button\"/>\n);\n\nfunction getRetweetCount (count){\n  if(count > 0){\n    return (\n      <span className=\"retweet-count\">\n        {count}\n      </span>\n    );\n  }else {\n    return null;\n  }\n}\n\nconst RetweetButton =({count}) => (\n  <span className=\"retweet-button\">\n  <i className=\"fa fa-retweet\"/>\n  { getRetweetCount(count)}m\n  </span>\n);\n\n\nRetweetButton.propTypes = {\n  count: PropTypes.number\n};\n\nconst LikeButton = ({count}) => (\n  <span className=\"like-button\">\n    <i className=\"fa fa-heart\" />\n    {\n      count > 0 &&\n      <span className=\"like-count\">\n        {count}m\n      </span>}\n  </span>\n);\n\nLikeButton.propTypes = {\n  count: PropTypes.number\n};\n\nconst MoreoptionsButton =() =>(\n  <i className=\"fa fa-ellipsis-h more-options-button\"></i>\n);\n\n\nfunction Avatar({hash}) \n{\n  var url  = \"https://www.gravatar.com/avatar/${hash}\";\n  {/*https://www.gravatar.com/avatar/c050686033f2bca3421fa701ad4f6cec*/}\n  return(\n    <img src= {url} alt=\"avatar\" className=\"avatar\" />\n  )\n\n}\n\nAvatar.propTypes = {\n  hash: PropTypes.string\n};\n\nfunction Tweet({tweet}){\n  return(\n    <div className=\"tweet\">\n      <Avatar hash={tweet.gravatar} />\n      <div className=\"content\">\n        <NameWithhandle author ={tweet.author}/><Time time={tweet.timestamp}/>\n        <Message text={tweet.message}/>\n        <div className=\"buttons\">\n          <ReplyButton/>\n          <RetweetButton count ={tweet.retweets}/>\n          <LikeButton count ={tweet.likes}/>\n          <MoreoptionsButton/>\n        </div>\n      </div>\n      \n    </div>\n  );\n}\n\nTweet.propTypes ={\n\n  tweet: PropTypes.shape(\n    {\n      gravatar: PropTypes.string,\n      message: PropTypes.string,\n      author: PropTypes.shape({\n        handle: PropTypes.string,\n        name: PropTypes.string\n      }),\n      likes : PropTypes.number,\n      retweets: PropTypes.number,\n      timestamp: PropTypes.string\n\n      })\n    }\n\n\n  \n\n\n\nvar  testTweet  ={\n  message: \"It's been four years since we successfully lunched now with over 1B users .\",\n  gravatar: \"c050686033f2bca3421fa701ad4f6cec\",\n  author: {\n    handle: \"rotimiAwoniran\",\n    name:\"Sage-Blacc - Clavem\"\n  },\n  likes:6,\n  retweets: 2,\n  timestamp: \"2016-07-30 21:24:37\"\n};\n\n\nReactDOM.render(\n  <Tweet tweet={testTweet} />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n",{"ruleId":"23","severity":1,"message":"24","line":24,"column":7,"nodeType":"25","messageId":"26","endLine":24,"endColumn":11},{"ruleId":"27","severity":1,"message":"28","line":76,"column":14,"nodeType":"29","messageId":"30","endLine":76,"endColumn":55},{"ruleId":"31","severity":1,"message":"32","line":77,"column":3,"nodeType":"33","messageId":"34","endLine":77,"endColumn":73},{"ruleId":"27","severity":1,"message":"28","line":106,"column":14,"nodeType":"29","messageId":"30","endLine":106,"endColumn":55},{"ruleId":"31","severity":1,"message":"32","line":107,"column":3,"nodeType":"33","messageId":"34","endLine":107,"endColumn":73},"no-unused-vars","'Time' is assigned a value but never used.","Identifier","unusedVar","no-template-curly-in-string","Unexpected template string expression.","Literal","unexpectedTemplateExpression","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock"]